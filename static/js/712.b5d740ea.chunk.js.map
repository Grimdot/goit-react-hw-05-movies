{"version":3,"file":"static/js/712.b5d740ea.chunk.js","mappings":"uNAGaA,EAAiBC,EAAAA,GAAAA,GAAH,oJAUdC,EAAiBD,EAAAA,GAAAA,GAAH,mSAcdE,GAAaF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,qEAKVI,EAAYJ,EAAAA,GAAAA,EAAH,8HAOTK,EAAcL,EAAAA,GAAAA,IAAH,6E,SCHxB,EA1BmB,SAAC,GAAgB,IAAdM,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACT,EAAD,UACGO,EAAOG,KAAI,YAAuC,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,GAAIC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAC9B,OACE,SAACZ,EAAD,WACE,UAACC,EAAD,CAAYY,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMT,GAAhD,WACE,SAACF,EAAD,CACEY,IACEJ,EAAW,yCAC2BA,GAD3B,sCAIbK,IAAI,kBAEN,SAACd,EAAD,UAAYM,GAAgBE,QAVXD,EAcxB,KAGN,C,mLC/BYQ,EAAgBnB,EAAAA,GAAAA,KAAH,+GAOboB,EAAYpB,EAAAA,GAAAA,IAAH,oEAKTqB,EAAiBrB,EAAAA,GAAAA,MAAH,kJASdsB,EAAkBtB,EAAAA,GAAAA,OAAH,8LAWfuB,GAAqBvB,EAAAA,EAAAA,IAAOwB,EAAAA,IAAPxB,CAAH,sN,SCd/B,EAbkB,SAAC,GAAsB,IAApByB,EAAmB,EAAnBA,aACnB,OACE,SAACN,EAAD,CAAeO,SAAUD,EAAzB,UACE,UAACL,EAAD,YACE,SAACE,EAAD,CAAiBK,KAAK,SAAtB,UACE,SAACJ,EAAD,OAEF,SAACF,EAAD,CAAgBM,KAAK,OAAOf,KAAK,aAIxC,E,kBCkCD,EA7Ce,WACb,OAAwCgB,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMR,EAAY,mCAAG,WAAMS,GAAN,4EACnBA,EAAEC,mBACIC,EAAeF,EAAEG,OAAOC,SAAS1B,KAAK2B,MAAMC,QAF/B,iCAMfP,EAAgB,CAAEQ,MAAOL,IANV,UAOMM,EAAAA,EAAAA,IAAgBN,GAPtB,OAOT9B,EAPS,OAQfwB,EAAgBxB,EAAOqC,SARR,kDAUfC,IAAAA,OAAAA,QAAwB,2BAVT,QAYnBV,EAAEG,OAAOQ,QAZU,0DAAH,sDAiClB,OAlBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAcf,EAAagB,IAAI,SAE/BC,EAAa,mCAAG,WAAMR,GAAN,iGAEEC,EAAAA,EAAAA,IAAgBD,GAFlB,OAEZS,EAFY,OAGlBpB,EAAgBoB,EAAMP,SAHJ,gDAKlBQ,QAAQC,IAAR,MACAR,IAAAA,OAAAA,QAAwB,2BANN,yDAAH,sDAUfG,GACFE,EAAcF,EAEjB,GAAE,CAACf,KAGF,iCACE,SAAC,EAAD,CAAWP,aAAcA,KAEZ,OAAZI,QAAY,IAAZA,OAAA,EAAAA,EAAcwB,QAAS,IAAK,SAACC,EAAA,EAAD,CAAYhD,OAAQuB,MAGtD,C","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","components/Searchbar/Searchbar.styled.jsx","components/Searchbar/Searchbar.jsx","pages/Movies.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const MoviesLinkList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n\n  gap: 30px;\n  padding: 30px;\n`;\n\nexport const MoviesLinkItem = styled.li`\n  list-style: none;\n  width: 320px;\n  border-radius: 4px;\n  box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px,\n    rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\n  transition: transform, ease-in-out, 250ms;\n\n  &:hover,\n  &:focus {\n    transform: scale(1.05);\n  }\n`;\n\nexport const MoviesLink = styled(Link)`\n  color: #000000;\n  text-decoration: none;\n`;\n\nexport const TitleName = styled.p`\n  padding-left: 10px;\n  height: 50px;\n  font-size: 20px;\n  transition: color, ease-in-out, 250ms;\n`;\n\nexport const TitlePoster = styled.img`\n  display: block;\n  width: 100%;\n  height: 480px;\n`;\n","import { useLocation } from 'react-router-dom';\n\nimport {\n  MoviesLink,\n  MoviesLinkList,\n  MoviesLinkItem,\n  TitleName,\n  TitlePoster,\n} from './MoviesList.styled';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <MoviesLinkList>\n      {movies.map(({ title, id, name, poster_path }) => {\n        return (\n          <MoviesLinkItem key={id}>\n            <MoviesLink to={`/movies/${id}`} state={{ from: location }}>\n              <TitlePoster\n                src={\n                  poster_path\n                    ? `https://image.tmdb.org/t/p/w400${poster_path}`\n                    : `https://via.placeholder.com/320x480`\n                }\n                alt=\"movie poster\"\n              />\n              <TitleName>{title ? title : name}</TitleName>\n            </MoviesLink>\n          </MoviesLinkItem>\n        );\n      })}\n    </MoviesLinkList>\n  );\n};\n\nexport default MoviesList;\n","import styled from 'styled-components';\nimport { BsSearch } from 'react-icons/bs';\n\nexport const SearchbarForm = styled.form`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n`;\n\nexport const InputWrap = styled.div`\n  margin-top: 30px;\n  position: relative;\n`;\n\nexport const SearchbarInput = styled.input`\n  width: 400px;\n  height: 30px;\n  font-size: 20px;\n  border-radius: 6px;\n  border-color: red;\n  padding-left: 35px;\n`;\n\nexport const SearchbarButton = styled.button`\n  position: absolute;\n  top: 50%;\n  left: 5px;\n  transform: translateY(-47%);\n  width: 30px;\n  height: 30px;\n  border: none;\n  background-color: transparent;\n`;\n\nexport const SearchbarButtonIcn = styled(BsSearch)`\n  width: 20px;\n  height: 20px;\n  transition: color, ease-in-out, 250ms;\n  &:hover,\n  &:focus {\n    color: red;\n    background-color: white;\n  }\n  &:active {\n    color: black;\n  }\n`;\n","import {\n  SearchbarButton,\n  SearchbarForm,\n  SearchbarInput,\n  InputWrap,\n  SearchbarButtonIcn,\n} from './Searchbar.styled';\n\nconst Searchbar = ({ handleSubmit }) => {\n  return (\n    <SearchbarForm onSubmit={handleSubmit}>\n      <InputWrap>\n        <SearchbarButton type=\"submit\">\n          <SearchbarButtonIcn />\n        </SearchbarButton>\n        <SearchbarInput type=\"text\" name=\"name\" />\n      </InputWrap>\n    </SearchbarForm>\n  );\n};\n\nexport default Searchbar;\n","import Notiflix from 'notiflix';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport Searchbar from 'components/Searchbar/Searchbar';\nimport { getMoviesByName } from 'services/moviesService';\nimport MoviesList from 'components/MoviesList/MoviesList';\n\nconst Movies = () => {\n  const [searchMovies, setSearchMovies] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const searchQuerry = e.target.elements.name.value.trim();\n\n    if (searchQuerry)\n      try {\n        setSearchParams({ query: searchQuerry });\n        const movies = await getMoviesByName(searchQuerry);\n        setSearchMovies(movies.results);\n      } catch {\n        Notiflix.Notify.failure('Something went wrong :(');\n      }\n    e.target.reset();\n  };\n\n  useEffect(() => {\n    const queryParams = searchParams.get('query');\n\n    const fetchByParams = async query => {\n      try {\n        const movie = await getMoviesByName(query);\n        setSearchMovies(movie.results);\n      } catch (error) {\n        console.log(error);\n        Notiflix.Notify.failure('Something went wrong :(');\n      }\n    };\n\n    if (queryParams) {\n      fetchByParams(queryParams);\n    }\n  }, [searchParams]);\n\n  return (\n    <>\n      <Searchbar handleSubmit={handleSubmit} />\n\n      {searchMovies?.length > 0 && <MoviesList movies={searchMovies} />}\n    </>\n  );\n};\nexport default Movies;\n"],"names":["MoviesLinkList","styled","MoviesLinkItem","MoviesLink","Link","TitleName","TitlePoster","movies","location","useLocation","map","title","id","name","poster_path","to","state","from","src","alt","SearchbarForm","InputWrap","SearchbarInput","SearchbarButton","SearchbarButtonIcn","BsSearch","handleSubmit","onSubmit","type","useState","searchMovies","setSearchMovies","useSearchParams","searchParams","setSearchParams","e","preventDefault","searchQuerry","target","elements","value","trim","query","getMoviesByName","results","Notiflix","reset","useEffect","queryParams","get","fetchByParams","movie","console","log","length","MoviesList"],"sourceRoot":""}